"use strict";(self.webpackChunk_grafana_ui=self.webpackChunk_grafana_ui||[]).push([[3806],{"./src/components/Cascader/Cascader.story.tsx":function(G,v,n){n.r(v),n.d(v,{Simple:function(){return l},WithCustomValue:function(){return c},WithDisplayAllSelectedLevels:function(){return d},WithInitialValue:function(){return i},WithOptionsStateUpdate:function(){return p},default:function(){return B}});var h=n("../../../yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/index.js"),u=n("./src/components/Cascader/Cascader.tsx"),r=n("../../../yarn/cache/react-npm-18.2.0-1eae08fee2-88e38092da.zip/node_modules/react/jsx-runtime.js"),f=n("../../.yarn/__virtual__/@mdx-js-react-virtual-4792127d00/2/yarn/cache/@mdx-js-react-npm-2.3.0-d5582a450b-f45fe77955.zip/node_modules/@mdx-js/react/lib/index.js"),g=n("../../.yarn/__virtual__/@storybook-blocks-virtual-5605a2f23e/2/yarn/cache/@storybook-blocks-patch-37aea2d782-9f0957019b.zip/node_modules/@storybook/blocks/dist/index.mjs");function y(a){const e=Object.assign({h1:"h1",p:"p",code:"code"},(0,f.ah)(),a.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(g.h_,{title:"MDX|Cascader",component:u.v}),`
`,(0,r.jsx)(e.h1,{id:"cascader",children:"Cascader"}),`
`,(0,r.jsxs)(e.p,{children:["The cascader component is a ",(0,r.jsx)(e.code,{children:"Select"})," with a cascading flyout menu. When you have lots of options in your select, they can be hard to navigate from a regular dropdown list. In that case you can use the cascader to organize your options into groups hierarchically. Just like in the ",(0,r.jsx)(e.code,{children:"Select"})," component, the cascader input doubles as a search field to quickly jump to a selection without navigating the list."]}),`
`,(0,r.jsxs)(e.p,{children:["You can either use the ",(0,r.jsx)(e.code,{children:"Simple"})," cascader component for an empty input as default state or use the ",(0,r.jsx)(e.code,{children:"initialValue"})," or ",(0,r.jsx)(e.code,{children:"allowCustomValue"})," fields to pre-fill your cascader. Initial value means that one of the options from your cascaded list is pre-selected. Custom value means that apart from existing options from the list, your users can add custom values to the list by typing them in the ",(0,r.jsx)(e.code,{children:"Select"})," input."]}),`
`,(0,r.jsx)(g.Ed,{of:u.v})]})}function M(a={}){const{wrapper:e}=Object.assign({},(0,f.ah)(),a.components);return e?(0,r.jsx)(e,Object.assign({},a,{children:(0,r.jsx)(y,a)})):y(a)}var A=M,X=Object.defineProperty,U=Object.defineProperties,J=Object.getOwnPropertyDescriptors,b=Object.getOwnPropertySymbols,N=Object.prototype.hasOwnProperty,R=Object.prototype.propertyIsEnumerable,j=(a,e,o)=>e in a?X(a,e,{enumerable:!0,configurable:!0,writable:!0,value:o}):a[e]=o,t=(a,e)=>{for(var o in e||(e={}))N.call(e,o)&&j(a,o,e[o]);if(b)for(var o of b(e))R.call(e,o)&&j(a,o,e[o]);return a},s=(a,e)=>U(a,J(e)),C,x,S,O,_,P,V,w,I,W,D,L,F,T,k;const z=a=>console.log(a),E=[{label:"First",value:"1",items:[{label:"Second",value:"2"},{label:"Third",value:"3"},{label:"Fourth",value:"4"}]},{label:"FirstFirst",value:"5"}],Y={title:"Forms/Cascader",component:u.v,parameters:{docs:{page:A},controls:{exclude:["placeholder","initialValue","changeOnSelect","onSelect","loadData","onChange","onPopupVisibleChange","formatCreateLabel"]}},args:{onSelect:z,options:E},argTypes:{width:{control:{type:"range",min:0,max:70}}}},m=a=>h.createElement(u.v,t({},a)),l=m.bind({});l.args={separator:""};const i=m.bind({});i.args={initialValue:"3"};const c=m.bind({});c.args={initialValue:"Custom Initial Value",allowCustomValue:!0,formatCreateLabel:a=>"Custom Label"+a};const d=m.bind({});d.args={displayAllSelectedLevels:!0,separator:","};const p=()=>{const[a,e]=h.useState([{label:"Initial state option",value:"initial"}]);return setTimeout(()=>e(E),2e3),h.createElement(u.v,{options:a,onSelect:z})};var B=Y;l.parameters=s(t({},l.parameters),{docs:s(t({},(C=l.parameters)==null?void 0:C.docs),{source:t({originalSource:"args => <Cascader {...args} />"},(S=(x=l.parameters)==null?void 0:x.docs)==null?void 0:S.source)})}),i.parameters=s(t({},i.parameters),{docs:s(t({},(O=i.parameters)==null?void 0:O.docs),{source:t({originalSource:"args => <Cascader {...args} />"},(P=(_=i.parameters)==null?void 0:_.docs)==null?void 0:P.source)})}),c.parameters=s(t({},c.parameters),{docs:s(t({},(V=c.parameters)==null?void 0:V.docs),{source:t({originalSource:"args => <Cascader {...args} />"},(I=(w=c.parameters)==null?void 0:w.docs)==null?void 0:I.source)})}),d.parameters=s(t({},d.parameters),{docs:s(t({},(W=d.parameters)==null?void 0:W.docs),{source:t({originalSource:"args => <Cascader {...args} />"},(L=(D=d.parameters)==null?void 0:D.docs)==null?void 0:L.source)})}),p.parameters=s(t({},p.parameters),{docs:s(t({},(F=p.parameters)==null?void 0:F.docs),{source:t({originalSource:`() => {
  const [updatedOptions, setOptions] = React.useState<CascaderOption[]>([{
    label: 'Initial state option',
    value: 'initial'
  }]);
  setTimeout(() => setOptions(options), 2000);
  return <Cascader options={updatedOptions} onSelect={onSelect} />;
}`},(k=(T=p.parameters)==null?void 0:T.docs)==null?void 0:k.source)})})}}]);
